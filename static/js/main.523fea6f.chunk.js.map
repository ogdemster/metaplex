{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","components/ResponsiveAppBar.js","components/Typography.js","modules/views/ProductCategories.js","modules/views/ProductValues.js","modules/views/AppFooter.js","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","connection.tsx","candy-machine.ts"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","currentShift","endSettings","endSettingType","toDate","number","goLiveDate","anchor","toNumber","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","setCurrentShift","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","cluster","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","error","hideDuration","Connection","candyMachineId","getCandyMachineState","cndy","getSlot","currentSlot","getBlockTime","blockTime","shift","active","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","add","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","Container","marginTop","Grid","container","xs","md","maxWidth","position","paddingBottom","backgroundColor","direction","wrap","Typography","formatNumber","asNumber","align","CANDY_MACHINE_PROGRAM","clusterUrl","handleTransaction","signatures","sig","equals","sendTransaction","broadcastTransaction","options","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","pages","links","linkTarget","settings","ResponsiveAppBar","React","anchorElNav","setAnchorElNav","anchorElUser","setAnchorElUser","handleCloseNavMenu","handleCloseUserMenu","AppBar","Toolbar","disableGutters","src","alt","Box","sx","flexGrow","IconButton","size","event","currentTarget","Menu","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Boolean","map","page","index","MenuItem","Link","href","target","textDecoration","noWrap","component","mr","fontFamily","letterSpacing","my","Tooltip","title","p","Avatar","mt","setting","textAlign","markClassesMapping","center","h1","h2","h3","h4","h5","h6","left","none","variantMapping","subtitle1","children","marked","other","markedClassName","palette","secondary","main","ImageBackdrop","right","top","bottom","opacity","transition","transitions","create","ImageIconButton","ButtonBase","breakpoints","down","zIndex","border","common","white","images","url","ProductCategories","mb","flexWrap","image","backgroundSize","backgroundPosition","backgroundImage","px","ProductValues","Copyright","getFullYear","AppFooter","createTheme","type","process","e","getCandyMachineId","clusterApiUrl","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","SequenceType","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","m","regex","exec","lastIndex","length","push","sendTransactions","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","Transaction","instruction","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","t","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","slot","StopOnFailure","Promise","all","txs","result","awaitConfirmation","includesFeePayer","Array","isArray","rawTransaction","serialize","skipPreflight","sendRawTransaction","confirmation","getUnixTs","timeout","startTime","sleep","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","queryStatus","confirmations","subId","resolve","reject","onSignature","context","getSignatureStatuses","signatureStatuses","removeSignatureListener","ms","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","mintTxn"],"mappings":"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","file":"static/js/main.523fea6f.chunk.js","sourcesContent":["import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.4),\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: 0,\r\n      marginBottom: theme.spacing(0.5),\r\n      height: theme.spacing(3.5),\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <span className={classes.done}>{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style}>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CandyMachineAccount } from './candy-machine';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport {\r\n  findGatewayToken,\r\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\r\n  onGatewayTokenChange,\r\n  removeAccountChangeListener,\r\n} from '@identity.com/solana-gateway-ts';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  setIsMinting,\r\n  isActive,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n  setIsMinting: (val: boolean) => void;\r\n  isActive: boolean;\r\n}) => {\r\n  const wallet = useWallet();\r\n  const connection = useConnection();\r\n  const [verified, setVerified] = useState(false);\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return 'SOLD OUT';\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (\r\n      candyMachine?.state.isPresale ||\r\n      candyMachine?.state.isWhitelistOnly\r\n    ) {\r\n      return 'WHITELIST MINT';\r\n    }\r\n\r\n    return 'MINT';\r\n  };\r\n\r\n  useEffect(() => {\r\n    const mint = async () => {\r\n      await removeAccountChangeListener(\r\n        connection.connection,\r\n        webSocketSubscriptionId,\r\n      );\r\n      await onMint();\r\n\r\n      setClicked(false);\r\n      setVerified(false);\r\n    };\r\n    if (verified && clicked) {\r\n      mint();\r\n    }\r\n  }, [\r\n    verified,\r\n    clicked,\r\n    connection.connection,\r\n    onMint,\r\n    webSocketSubscriptionId,\r\n  ]);\r\n\r\n  const previousGatewayStatus = usePrevious(gatewayStatus);\r\n  useEffect(() => {\r\n    const fromStates = [\r\n      GatewayStatus.NOT_REQUESTED,\r\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\r\n    ];\r\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\r\n    if (\r\n      fromStates.find(state => previousGatewayStatus === state) &&\r\n      !invalidToStates.find(state => gatewayStatus === state)\r\n    ) {\r\n      setIsMinting(true);\r\n    }\r\n    console.log('change: ', gatewayStatus);\r\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={isMinting || !isActive}\r\n      onClick={async () => {\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          const network =\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\r\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\r\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n              await onMint();\r\n            } else {\r\n              // setIsMinting(true);\r\n              await requestGatewayToken();\r\n              console.log('after: ', gatewayStatus);\r\n            }\r\n          } else if (\r\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\r\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\r\n          ) {\r\n            setClicked(true);\r\n            const gatewayToken = await findGatewayToken(\r\n              connection.connection,\r\n              wallet.publicKey!,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n            );\r\n\r\n            if (gatewayToken?.isValid()) {\r\n              await onMint();\r\n            } else {\r\n              window.open(\r\n                `https://verify.encore.fans/?gkNetwork=${network}`,\r\n                '_blank',\r\n              );\r\n\r\n              const gatewayTokenAddress =\r\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\r\n                  wallet.publicKey!,\r\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n                );\r\n\r\n              setWebSocketSubscriptionId(\r\n                onGatewayTokenChange(\r\n                  connection.connection,\r\n                  gatewayTokenAddress,\r\n                  () => setVerified(true),\r\n                  'confirmed',\r\n                ),\r\n              );\r\n            }\r\n          } else {\r\n            setClicked(false);\r\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport './home.css';\r\nimport styled from 'styled-components';\r\nimport { Container, Snackbar } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n} from '@solana/web3.js';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CANDY_MACHINE_PROGRAM,\r\n  CandyMachineAccount,\r\n  createAccountsForMint,\r\n  getCandyMachineState,\r\n  getCollectionPDA,\r\n  mintOneToken,\r\n  SetupState,\r\n} from './candy-machine';\r\nimport { AlertState, formatNumber, getAtaForMint, toDate } from './utils';\r\nimport { MintCountdown } from './MintCountdown';\r\nimport { MintButton } from './MintButton';\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\nimport { sendTransaction } from './connection';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n  network: WalletAdapterNetwork;\r\n  error?: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: '',\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [currentShift, setCurrentShift] = useState<number>(0);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isValidBalance, setIsValidBalance] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n  const cluster = props.network;\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(\r\n    async (commitment: Commitment = 'confirmed') => {\r\n      if (!anchorWallet) {\r\n        return;\r\n      }\r\n      if (props.error !== undefined) {\r\n        setAlertState({\r\n          open: true,\r\n          message: props.error,\r\n          severity: 'error',\r\n          hideDuration: null,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const connection = new Connection(props.rpcHost, commitment);\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet,\r\n            props.candyMachineId,\r\n            connection,\r\n          );\r\n          const currentSlot = await connection.getSlot();\r\n          const blockTime = (await connection.getBlockTime(\r\n            currentSlot,\r\n          )) as number;\r\n          const shift = new Date().getTime() / 1000 - blockTime;\r\n\r\n          let active =\r\n            cndy?.state.goLiveDate?.toNumber() + shift <\r\n            new Date().getTime() / 1000;\r\n          let presale = false;\r\n\r\n          // duplication of state to make sure we have the right values!\r\n          let isWLUser = false;\r\n          let userPrice = cndy.state.price;\r\n\r\n          // whitelist mint?\r\n          if (cndy?.state.whitelistMintSettings) {\r\n            // is it a presale mint?\r\n            if (\r\n              cndy.state.whitelistMintSettings.presale &&\r\n              (!cndy.state.goLiveDate ||\r\n                cndy.state.goLiveDate.toNumber() + shift >\r\n                  new Date().getTime() / 1000)\r\n            ) {\r\n              presale = true;\r\n            }\r\n            // is there a discount?\r\n            if (cndy.state.whitelistMintSettings.discountPrice) {\r\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\r\n            } else {\r\n              setDiscountPrice(undefined);\r\n              // when presale=false and discountPrice=null, mint is restricted\r\n              // to whitelist users only\r\n              if (!cndy.state.whitelistMintSettings.presale) {\r\n                cndy.state.isWhitelistOnly = true;\r\n              }\r\n            }\r\n            // retrieves the whitelist token\r\n            const mint = new anchor.web3.PublicKey(\r\n              cndy.state.whitelistMintSettings.mint,\r\n            );\r\n            const token = (\r\n              await getAtaForMint(mint, anchorWallet.publicKey)\r\n            )[0];\r\n\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n              isWLUser = parseInt(balance.value.amount) > 0;\r\n              // only whitelist the user if the balance > 0\r\n              setIsWhitelistUser(isWLUser);\r\n\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = isWLUser && (presale || active);\r\n              }\r\n            } catch (e) {\r\n              setIsWhitelistUser(false);\r\n              // no whitelist user, no mint\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = false;\r\n              }\r\n              console.log(\r\n                'There was a problem fetching whitelist token balance',\r\n              );\r\n              console.log(e);\r\n            }\r\n          }\r\n          userPrice = isWLUser ? userPrice : cndy.state.price;\r\n\r\n          if (cndy?.state.tokenMint) {\r\n            // retrieves the SPL token\r\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\r\n            const token = (\r\n              await getAtaForMint(mint, anchorWallet.publicKey)\r\n            )[0];\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n\r\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\r\n\r\n              // only allow user to mint if token balance >  the user if the balance > 0\r\n              setIsValidBalance(valid);\r\n              active = active && valid;\r\n            } catch (e) {\r\n              setIsValidBalance(false);\r\n              active = false;\r\n              // no whitelist user, no mint\r\n              console.log('There was a problem fetching SPL token balance');\r\n              console.log(e);\r\n            }\r\n          } else {\r\n            const balance = new anchor.BN(\r\n              await connection.getBalance(anchorWallet.publicKey),\r\n            );\r\n            const valid = balance.gte(userPrice);\r\n            setIsValidBalance(valid);\r\n            active = active && valid;\r\n          }\r\n\r\n          // datetime to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.date) {\r\n            setEndDate(\r\n              toDate(cndy.state.endSettings.number.add(new anchor.BN(shift))),\r\n            );\r\n            if (\r\n              new Date().getTime() / 1000 >\r\n              cndy.state.endSettings.number.toNumber() + shift\r\n            ) {\r\n              active = false;\r\n            }\r\n          }\r\n          // amount to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.amount) {\r\n            let limit = Math.min(\r\n              cndy.state.endSettings.number.toNumber(),\r\n              cndy.state.itemsAvailable,\r\n            );\r\n            if (cndy.state.itemsRedeemed < limit) {\r\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n            } else {\r\n              setItemsRemaining(0);\r\n              cndy.state.isSoldOut = true;\r\n            }\r\n          } else {\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n          }\r\n\r\n          if (cndy.state.isSoldOut) {\r\n            active = false;\r\n          }\r\n\r\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n          const collectionPDAAccount = await connection.getAccountInfo(\r\n            collectionPDA,\r\n          );\r\n          setIsActive((cndy.state.isActive = active));\r\n          setCurrentShift(shift);\r\n\r\n          setIsPresale((cndy.state.isPresale = presale));\r\n          setCandyMachine(cndy);\r\n\r\n          const txnEstimate =\r\n            892 +\r\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n            (cndy.state.tokenMint ? 66 : 0) +\r\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n            (cndy.state.gatekeeper ? 33 : 0) +\r\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n          setNeedTxnSplit(txnEstimate > 1230);\r\n        } catch (e) {\r\n          if (e instanceof Error) {\r\n            if (\r\n              e.message === `Account does not exist ${props.candyMachineId}`\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\r\n                severity: 'error',\r\n                hideDuration: null,\r\n              });\r\n            } else if (\r\n              e.message.startsWith('failed to get info about account')\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                severity: 'error',\r\n                hideDuration: null,\r\n              });\r\n            }\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: `${e}`,\r\n              severity: 'error',\r\n              hideDuration: null,\r\n            });\r\n          }\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n          severity: 'error',\r\n          hideDuration: null,\r\n        });\r\n      }\r\n    },\r\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost],\r\n  );\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n  ) => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      document.getElementById('#identity')?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Please sign account setup transaction',\r\n            severity: 'info',\r\n          });\r\n          setupMint = await createAccountsForMint(\r\n            candyMachine,\r\n            wallet.publicKey,\r\n          );\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true,\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                'Setup transaction succeeded! Please sign minting transaction',\r\n              severity: 'info',\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: 'Mint failed! Please try again!',\r\n              severity: 'error',\r\n            });\r\n            setIsUserMinting(false);\r\n            return;\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Please sign minting transaction',\r\n            severity: 'info',\r\n          });\r\n        }\r\n\r\n        let mintResult = await mintOneToken(\r\n          candyMachine,\r\n          wallet.publicKey,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n          setupMint ?? setupTxn,\r\n        );\r\n\r\n        let status: any = { err: true };\r\n        let metadataStatus = null;\r\n        if (mintResult) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintResult.mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true,\r\n          );\r\n\r\n          metadataStatus =\r\n            await candyMachine.program.provider.connection.getAccountInfo(\r\n              mintResult.metadataKey,\r\n              'processed',\r\n            );\r\n          console.log('Metadata status: ', !!metadataStatus);\r\n        }\r\n\r\n        if (status && !status.err && metadataStatus) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          let remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setSetupTxn(undefined);\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Congratulations! Mint succeeded!',\r\n            severity: 'success',\r\n            hideDuration: 7000,\r\n          });\r\n          refreshCandyMachineState('processed');\r\n        } else if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message:\r\n              'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\r\n            severity: 'error',\r\n            hideDuration: 8000,\r\n          });\r\n          refreshCandyMachineState();\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Mint failed! Please try again!',\r\n            severity: 'error',\r\n          });\r\n          refreshCandyMachineState();\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = 'Transaction timeout! Please try again.';\r\n        } else if (error.message.indexOf('0x137')) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: 'error',\r\n      });\r\n      // updates the candy machine state to reflect the latest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = (currentShift: number) => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n    console.log(\r\n      candyMachine!.state.goLiveDate.toNumber() + currentShift <=\r\n        new Date().getTime() / 1000,\r\n    );\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() + currentShift <=\r\n        new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (function loop() {\r\n      setTimeout(() => {\r\n        refreshCandyMachineState();\r\n        loop();\r\n      }, 20000);\r\n    })();\r\n  }, [refreshCandyMachineState]);\r\n\r\n  return (\r\n    <Container\r\n      className=\"container-fluid\"\r\n      style={{\r\n        marginTop: 100,\r\n        height: '50vh',\r\n      }}\r\n    >\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} md={8}>\r\n          <h1 style={{ fontSize: '46px', color: 'white' }}>\r\n            Anime Core <br /> Collection\r\n          </h1>\r\n          <h4>Mintin live now! Grap your Anime...</h4>\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n            <Paper\r\n              style={{\r\n                padding: 24,\r\n                paddingBottom: 10,\r\n                backgroundColor: '#151A1F',\r\n                borderRadius: 6,\r\n              }}\r\n            >\r\n              {!wallet.connected ? (\r\n                <ConnectButton>Connect Wallet</ConnectButton>\r\n              ) : (\r\n                <>\r\n                  {candyMachine && (\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      wrap=\"nowrap\"\r\n                    >\r\n                      <Grid item xs={3}>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          Remaining\r\n                        </Typography>\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textPrimary\"\r\n                          style={{\r\n                            fontWeight: 'bold',\r\n                          }}\r\n                        >\r\n                          {`${itemsRemaining}`}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item xs={4}>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          {isWhitelistUser && discountPrice\r\n                            ? 'Discount Price'\r\n                            : 'Price'}\r\n                        </Typography>\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textPrimary\"\r\n                          style={{ fontWeight: 'bold' }}\r\n                        >\r\n                          {isWhitelistUser && discountPrice\r\n                            ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                            : `◎ ${formatNumber.asNumber(\r\n                                candyMachine.state.price,\r\n                              )}`}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item xs={5}>\r\n                        {isActive &&\r\n                        endDate &&\r\n                        Date.now() < endDate.getTime() ? (\r\n                          <>\r\n                            <MintCountdown\r\n                              key=\"endSettings\"\r\n                              date={getCountdownDate(\r\n                                candyMachine,\r\n                                currentShift,\r\n                              )}\r\n                              style={{ justifyContent: 'flex-end' }}\r\n                              status=\"COMPLETED\"\r\n                              onComplete={() => toggleMintButton(currentShift)}\r\n                            />\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: 'bold' }}\r\n                            >\r\n                              TO END OF MINT\r\n                            </Typography>\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <MintCountdown\r\n                              key=\"goLive\"\r\n                              date={getCountdownDate(\r\n                                candyMachine,\r\n                                currentShift,\r\n                              )}\r\n                              style={{ justifyContent: 'flex-end' }}\r\n                              status={\r\n                                candyMachine?.state?.isSoldOut ||\r\n                                (endDate && Date.now() > endDate.getTime())\r\n                                  ? 'COMPLETED'\r\n                                  : isPresale\r\n                                  ? 'PRESALE'\r\n                                  : 'LIVE'\r\n                              }\r\n                              onComplete={() => toggleMintButton(currentShift)}\r\n                            />\r\n                            {isPresale &&\r\n                              candyMachine.state.goLiveDate &&\r\n                              candyMachine.state.goLiveDate.toNumber() +\r\n                                currentShift >\r\n                                new Date().getTime() / 1000 && (\r\n                                <Typography\r\n                                  variant=\"caption\"\r\n                                  align=\"center\"\r\n                                  display=\"block\"\r\n                                  style={{ fontWeight: 'bold' }}\r\n                                >\r\n                                  UNTIL PUBLIC MINT\r\n                                </Typography>\r\n                              )}\r\n                          </>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  )}\r\n                  <MintContainer>\r\n                    {candyMachine?.state.isActive &&\r\n                    candyMachine?.state.gatekeeper &&\r\n                    wallet.publicKey &&\r\n                    wallet.signTransaction ? (\r\n                      <GatewayProvider\r\n                        wallet={{\r\n                          publicKey:\r\n                            wallet.publicKey ||\r\n                            new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                          //@ts-ignore\r\n                          signTransaction: wallet.signTransaction,\r\n                        }}\r\n                        gatekeeperNetwork={\r\n                          candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                        }\r\n                        clusterUrl={rpcUrl}\r\n                        cluster={cluster}\r\n                        handleTransaction={async (transaction: Transaction) => {\r\n                          setIsUserMinting(true);\r\n                          const userMustSign = transaction.signatures.find(\r\n                            sig => sig.publicKey.equals(wallet.publicKey!),\r\n                          );\r\n                          if (userMustSign) {\r\n                            setAlertState({\r\n                              open: true,\r\n                              message:\r\n                                'Please sign one-time Civic Pass issuance',\r\n                              severity: 'info',\r\n                            });\r\n                            try {\r\n                              transaction = await wallet.signTransaction!(\r\n                                transaction,\r\n                              );\r\n                            } catch (e) {\r\n                              setAlertState({\r\n                                open: true,\r\n                                message: 'User cancelled signing',\r\n                                severity: 'error',\r\n                              });\r\n                              // setTimeout(() => window.location.reload(), 2000);\r\n                              setIsUserMinting(false);\r\n                              throw e;\r\n                            }\r\n                          } else {\r\n                            setAlertState({\r\n                              open: true,\r\n                              message: 'Refreshing Civic Pass',\r\n                              severity: 'info',\r\n                            });\r\n                          }\r\n                          try {\r\n                            await sendTransaction(\r\n                              props.connection,\r\n                              wallet,\r\n                              transaction,\r\n                              [],\r\n                              true,\r\n                              'confirmed',\r\n                            );\r\n                            setAlertState({\r\n                              open: true,\r\n                              message: 'Please sign minting',\r\n                              severity: 'info',\r\n                            });\r\n                          } catch (e) {\r\n                            setAlertState({\r\n                              open: true,\r\n                              message:\r\n                                'Solana dropped the transaction, please try again',\r\n                              severity: 'warning',\r\n                            });\r\n                            console.error(e);\r\n                            // setTimeout(() => window.location.reload(), 2000);\r\n                            setIsUserMinting(false);\r\n                            throw e;\r\n                          }\r\n                          await onMint();\r\n                        }}\r\n                        broadcastTransaction={false}\r\n                        options={{ autoShowModal: false }}\r\n                      >\r\n                        <MintButton\r\n                          candyMachine={candyMachine}\r\n                          isMinting={isUserMinting}\r\n                          setIsMinting={val => setIsUserMinting(val)}\r\n                          onMint={onMint}\r\n                          isActive={\r\n                            isActive ||\r\n                            (isPresale && isWhitelistUser && isValidBalance)\r\n                          }\r\n                        />\r\n                      </GatewayProvider>\r\n                    ) : (\r\n                      <MintButton\r\n                        candyMachine={candyMachine}\r\n                        isMinting={isUserMinting}\r\n                        setIsMinting={val => setIsUserMinting(val)}\r\n                        onMint={onMint}\r\n                        isActive={\r\n                          isActive ||\r\n                          (isPresale && isWhitelistUser && isValidBalance)\r\n                        }\r\n                      />\r\n                    )}\r\n                  </MintContainer>\r\n                </>\r\n              )}\r\n              <Typography\r\n                variant=\"caption\"\r\n                align=\"center\"\r\n                display=\"block\"\r\n                style={{ marginTop: 7, color: 'grey' }}\r\n              >\r\n                Powered by METAPLEX\r\n              </Typography>\r\n            </Paper>\r\n          </Container>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={\r\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\r\n        }\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount,\r\n  currentShift: number,\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? new anchor.BN(candyMachine.state.goLiveDate.toNumber() + currentShift)\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined,\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport { Link } from '@mui/material';\r\nimport AddchartTwoToneIcon from '@mui/icons-material/AddchartTwoTone';\r\n\r\nconst pages = [\r\n  'Roadmap',\r\n  'Collections',\r\n  'Opensea',\r\n  'Rarible',\r\n  'Youtube',\r\n  'Medium',\r\n  'Discord',\r\n];\r\nconst links = [\r\n  '#Roadmap',\r\n  '#Collections',\r\n  'https://opensea.io/collection/acc-v2-1',\r\n  'https://rarible.com/apesinsummer',\r\n  'https://www.youtube.com/channel/UC9WsUIOmL0eEHNV2PxQgHuw',\r\n  'https://medium.com/@0xgreatart',\r\n  'https://discord.gg/fduP9wMA',\r\n];\r\nconst linkTarget = [\r\n  '_self',\r\n  '_self',\r\n  '_blank',\r\n  '_blank',\r\n  '_blank',\r\n  '_blank',\r\n  '_blank',\r\n];\r\nconst settings = ['Dashboard', 'Logout'];\r\n\r\nconst ResponsiveAppBar = () => {\r\n  const [anchorElNav, setAnchorElNav] = React.useState(null);\r\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\r\n\r\n  const handleOpenNavMenu = event => {\r\n    setAnchorElNav(event.currentTarget);\r\n  };\r\n  const handleOpenUserMenu = event => {\r\n    setAnchorElUser(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseNavMenu = () => {\r\n    setAnchorElNav(null);\r\n  };\r\n\r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\" style={{ background: 'gray' }}>\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar disableGutters>\r\n          <img\r\n            src=\"https://avatars.githubusercontent.com/u/58356104?s=400&u=234f01f0c324ba5d72a506102e956fbd07629ce2&v=4\"\r\n            width={50}\r\n            height={50}\r\n            alt=\"0xgreat.art\"\r\n          />\r\n\r\n          <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"Account\"\r\n              aria-controls=\"menu-appbar\"\r\n              aria-haspopup=\"true\"\r\n              onClick={handleOpenNavMenu}\r\n              color=\"inherit\"\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElNav}\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'left',\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'left',\r\n              }}\r\n              open={Boolean(anchorElNav)}\r\n              onClose={handleCloseNavMenu}\r\n              sx={{\r\n                display: { xs: 'block', md: 'none' },\r\n              }}\r\n            >\r\n              {pages.map((page, index) => (\r\n                <MenuItem key={page} onClick={handleCloseNavMenu}>\r\n                  <AddchartTwoToneIcon />\r\n                  <Link\r\n                    href={`${links[index]}`}\r\n                    target={`${linkTarget[index]}`}\r\n                    style={{ textDecoration: 'none', color: 'white' }}\r\n                  >\r\n                    <br />\r\n                    {page}\r\n                  </Link>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n          <Typography\r\n            variant=\"h5\"\r\n            noWrap\r\n            component=\"a\"\r\n            href=\"\"\r\n            sx={{\r\n              mr: 2,\r\n              display: { xs: 'flex', md: 'none' },\r\n              flexGrow: 1,\r\n              fontFamily: 'monospace',\r\n              fontWeight: 700,\r\n              letterSpacing: '.3rem',\r\n              color: 'inherit',\r\n              textDecoration: 'none',\r\n            }}\r\n          >\r\n            0xgreat.art\r\n          </Typography>\r\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n            {pages.map((page, index) => (\r\n              <Button\r\n                key={page}\r\n                onClick={handleCloseNavMenu}\r\n                sx={{ my: 2, color: 'white', display: 'block' }}\r\n                href={`${links[index]}`}\r\n                target={`${linkTarget[index]}`}\r\n                style={{ textDecoration: 'none', color: 'white' }}\r\n              >\r\n                {page}\r\n              </Button>\r\n            ))}\r\n          </Box>\r\n\r\n          <Box sx={{ flexGrow: 0 }}>\r\n            <Tooltip title=\"Open settings\">\r\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n              sx={{ mt: '45px' }}\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElUser}\r\n              anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n              }}\r\n              open={Boolean(anchorElUser)}\r\n              onClose={handleCloseUserMenu}\r\n            >\r\n              {settings.map(setting => (\r\n                <MenuItem key={setting} onClick={handleCloseUserMenu}>\r\n                  <Typography textAlign=\"center\">{setting}</Typography>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\nexport default ResponsiveAppBar;\r\n","import * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport MuiTypography from \"@mui/material/Typography\";\r\n\r\nconst markClassesMapping = {\r\n  center: {\r\n    h1: \"\",\r\n    h2: \"OnePirateTypography-markedH2Center\",\r\n    h3: \"OnePirateTypography-markedH3Center\",\r\n    h4: \"OnePirateTypography-markedH4Center\",\r\n    h5: \"\",\r\n    h6: \"\",\r\n  },\r\n  left: {\r\n    h1: \"\",\r\n    h2: \"\",\r\n    h3: \"\",\r\n    h4: \"\",\r\n    h5: \"\",\r\n    h6: \"OnePirateTypography-markedH6Left\",\r\n  },\r\n  none: {\r\n    h1: \"\",\r\n    h2: \"\",\r\n    h3: \"\",\r\n    h4: \"\",\r\n    h5: \"\",\r\n    h6: \"\",\r\n  },\r\n};\r\n\r\nconst styles = ({ theme }) => ({\r\n  [`& .${markClassesMapping.center.h2}`]: {\r\n    height: 4,\r\n    width: 73,\r\n    display: \"block\",\r\n    margin: `${theme.spacing(1)} auto 0`,\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  [`& .${markClassesMapping.center.h3}`]: {\r\n    height: 4,\r\n    width: 55,\r\n    display: \"block\",\r\n    margin: `${theme.spacing(1)} auto 0`,\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  [`& .${markClassesMapping.center.h4}`]: {\r\n    height: 4,\r\n    width: 55,\r\n    display: \"block\",\r\n    margin: `${theme.spacing(1)} auto 0`,\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  [`& .${markClassesMapping.left.h6}`]: {\r\n    height: 2,\r\n    width: 28,\r\n    display: \"block\",\r\n    marginTop: theme.spacing(0.5),\r\n    background: \"currentColor\",\r\n  },\r\n});\r\n\r\nconst variantMapping = {\r\n  h1: \"h1\",\r\n  h2: \"h1\",\r\n  h3: \"h1\",\r\n  h4: \"h1\",\r\n  h5: \"h3\",\r\n  h6: \"h2\",\r\n  subtitle1: \"h3\",\r\n};\r\n\r\nfunction Typography(props) {\r\n  const { children, variant, marked = \"none\", ...other } = props;\r\n\r\n  let markedClassName = \"\";\r\n  if (variant && variant in markClassesMapping[marked]) {\r\n    markedClassName = markClassesMapping[marked][variant];\r\n  }\r\n\r\n  return (\r\n    <MuiTypography variantMapping={variantMapping} variant={variant} {...other}>\r\n      {children}\r\n      {markedClassName ? <span className={markedClassName} /> : null}\r\n    </MuiTypography>\r\n  );\r\n}\r\n\r\nTypography.propTypes = {\r\n  /**\r\n   * The content of the component.\r\n   */\r\n  children: PropTypes.node,\r\n  marked: PropTypes.oneOf([\"center\", \"left\", \"none\"]),\r\n  /**\r\n   * Applies the theme typography styles.\r\n   * @default 'body1'\r\n   */\r\n  variant: PropTypes.oneOf([\r\n    \"body1\",\r\n    \"body2\",\r\n    \"button\",\r\n    \"caption\",\r\n    \"h1\",\r\n    \"h2\",\r\n    \"h3\",\r\n    \"h4\",\r\n    \"h5\",\r\n    \"h6\",\r\n    \"inherit\",\r\n    \"overline\",\r\n    \"subtitle1\",\r\n    \"subtitle2\",\r\n  ]),\r\n};\r\n\r\nexport default styled(Typography)(styles);\r\n","import * as React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Box from \"@mui/material/Box\";\r\nimport ButtonBase from \"@mui/material/ButtonBase\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Typography from \"../../components/Typography\";\r\n\r\nconst ImageBackdrop = styled(\"div\")(({ theme }) => ({\r\n  position: \"absolute\",\r\n  left: 0,\r\n  right: 0,\r\n  top: 0,\r\n  bottom: 0,\r\n  background: \"#000\",\r\n  opacity: 0.5,\r\n  transition: theme.transitions.create(\"opacity\"),\r\n}));\r\n\r\nconst ImageIconButton = styled(ButtonBase)(({ theme }) => ({\r\n  position: \"relative\",\r\n  display: \"block\",\r\n  padding: 0,\r\n  borderRadius: 0,\r\n  height: \"40vh\",\r\n  [theme.breakpoints.down(\"md\")]: {\r\n    width: \"100% !important\",\r\n    height: 100,\r\n  },\r\n  \"&:hover\": {\r\n    zIndex: 1,\r\n  },\r\n  \"&:hover .imageBackdrop\": {\r\n    opacity: 0.15,\r\n  },\r\n  \"&:hover .imageMarked\": {\r\n    opacity: 0,\r\n  },\r\n  \"&:hover .imageTitle\": {\r\n    border: \"4px solid currentColor\",\r\n  },\r\n  \"& .imageTitle\": {\r\n    position: \"relative\",\r\n    padding: `${theme.spacing(2)} ${theme.spacing(4)} 14px`,\r\n  },\r\n  \"& .imageMarked\": {\r\n    height: 3,\r\n    width: 18,\r\n    background: theme.palette.common.white,\r\n    position: \"absolute\",\r\n    bottom: -2,\r\n    left: \"calc(50% - 9px)\",\r\n    transition: theme.transitions.create(\"opacity\"),\r\n  },\r\n}));\r\n\r\nconst images = [\r\n  {\r\n    url: \"https://arweave.net/YQY4XBPzc7iDtehMTRu9pvJLx0JExMjoa2yaQha1uPE?ext=png&auto=format&fit=crop&w=400\",\r\n    title: \"Anime Core #752\",\r\n    width: \"40%\",\r\n  },\r\n  {\r\n    url: \"https://arweave.net/DcvprtM0YF8X6rvdgp9b3m99S6eqRioK2SOTzPIPwjc?ext=png\",\r\n    title: \"Anime Core #705\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    url: \"https://gateway.pinata.cloud/ipfs/QmcPrv829fQLqYW6vk5CqnRw2nXaHj5UqVGjsvCX3GqJZe/1461.png\",\r\n    title: \"Apes in Summer Uniques #1461\",\r\n    width: \"40%\",\r\n  },\r\n  {\r\n    url: \"https://gateway.pinata.cloud/ipfs/QmcPrv829fQLqYW6vk5CqnRw2nXaHj5UqVGjsvCX3GqJZe/1355.png\",\r\n    title: \"Apes in Summer Uniques #1355\",\r\n    width: \"38%\",\r\n  },\r\n  {\r\n    url: \"https://gateway.pinata.cloud/ipfs/QmcPrv829fQLqYW6vk5CqnRw2nXaHj5UqVGjsvCX3GqJZe/1376.png\",\r\n    title: \"Apes in Summer Uniques #1376\",\r\n    width: \"38%\",\r\n  },\r\n  {\r\n    url: \"https://arweave.net/XYNU2RhrRRbkaVAXUXRDo0lcS_fhIly4KBHm76xO3u8?ext=png\",\r\n    title: \"Anime Core #369\",\r\n    width: \"24%\",\r\n  },\r\n  {\r\n    url: \"https://gateway.pinata.cloud/ipfs/QmcPrv829fQLqYW6vk5CqnRw2nXaHj5UqVGjsvCX3GqJZe/1566.png\",\r\n    title: \"Apes in Summer Uniques #1566\",\r\n    width: \"40%\",\r\n  },\r\n  {\r\n    url: \"https://arweave.net/h6uBaxO7i544SkLj1-es5KX5wzjbW9pDJ9K25S0bj0Q?ext=png\",\r\n    title: \"Anime Core #66\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    url: \"https://gateway.pinata.cloud/ipfs/QmcPrv829fQLqYW6vk5CqnRw2nXaHj5UqVGjsvCX3GqJZe/1367.png\",\r\n    title: \"Apes in Summer Uniques #1367\",\r\n    width: \"40%\",\r\n  },\r\n];\r\n\r\nexport default function ProductCategories() {\r\n  return (\r\n    <Container component=\"section\" sx={{ mt: 8, mb: 4 }}>\r\n      <Typography variant=\"h4\" marked=\"center\" align=\"center\" component=\"h2\">\r\n        Random items from our collections.\r\n      </Typography>\r\n      <Box sx={{ mt: 8, display: \"flex\", flexWrap: \"wrap\" }} id=\"Collections\">\r\n        {images.map((image) => (\r\n          <ImageIconButton\r\n            key={image.title}\r\n            style={{\r\n              width: image.width,\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                position: \"absolute\",\r\n                left: 0,\r\n                right: 0,\r\n                top: 0,\r\n                bottom: 0,\r\n                backgroundSize: \"cover\",\r\n                backgroundPosition: \"center 40%\",\r\n                backgroundImage: `url(${image.url})`,\r\n              }}\r\n            />\r\n            <ImageBackdrop className=\"imageBackdrop\" />\r\n            <Box\r\n              sx={{\r\n                position: \"absolute\",\r\n                left: 0,\r\n                right: 0,\r\n                top: 0,\r\n                bottom: 0,\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                color: \"common.white\",\r\n              }}\r\n            >\r\n              <Typography\r\n                component=\"h3\"\r\n                variant=\"h6\"\r\n                color=\"inherit\"\r\n                className=\"imageTitle\"\r\n              >\r\n                {image.title}\r\n                <div className=\"imageMarked\" />\r\n              </Typography>\r\n            </Box>\r\n          </ImageIconButton>\r\n        ))}\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Typography from \"../../components/Typography\";\r\n\r\nconst item = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  px: 5,\r\n};\r\n\r\nfunction ProductValues() {\r\n  return (\r\n    <Container sx={{ mt: 1, mb: 1, display: \"flex\", position: \"relative\" }}>\r\n      <Grid container spacing={5}>\r\n        <Grid item xs={12} md={12}>\r\n          <Box sx={item} id=\"Roadmap\">\r\n            <Typography variant=\"h6\" sx={{ my: 5 }}>\r\n              About the collection\r\n            </Typography>\r\n            <Typography variant=\"h5\" align=\"justify\">\r\n              {\r\n                \"It should be ensured that people have access to the information they need to be included in this period, where many people have little knowledge and interest, and have difficulty in expressing themselves, but extending from coins to the metaverse and which is one of the necessities of the new age. It seems very difficult to get everyone involved. But what is clear is that in order to involve everyone, it must inform them and make them realize that anything that seems complicated is actually simple and that anyone can do it.\"\r\n              }\r\n              <p>\r\n                {\r\n                  \"The NFt world is just the beginning. Sometimes long-term, sometimes short-term responses can be received. While trying to obtain what is known and seen in a short time carries a great risk of loss, good feedback can be obtained as the holder.\"\r\n                }\r\n              </p>\r\n              <p>\r\n                {\r\n                  \"The nfts that we currently create in polygon and solana networks will gradually continue to spread in other networks. Instead of just creating or selling them, all the production stages will be published via all social media for those who are interested or want to learn about it.\"\r\n                }\r\n              </p>\r\n              <p>\r\n                {\r\n                  \"This collection of ours is created in the solana network. With the Mint transaction, you can buy it here, as well as on Opensea, the largest marketplace.\"\r\n                }\r\n              </p>\r\n              <p>\r\n                {\r\n                  \"You can reach our social media accounts below. You can ask questions and request support. Everything to improve and evolve!!!\"\r\n                }\r\n              </p>\r\n            </Typography>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ProductValues;\r\n","import * as React from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <React.Fragment>\r\n      {\"© \"}\r\n      <Link color=\"inherit\" href=\"https://0xgreat.art\">\r\n        0xgreat.art\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default function AppFooter() {\r\n  return (\r\n    <Container sx={{ my: 1, display: \"flex\" }}>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justifyContent=\"flex-end\"\r\n        spacing={2}\r\n        sx={{ height: 120 }}\r\n        alignItems=\"center\"\r\n      >\r\n        <Copyright />\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport Home from './Home';\r\nimport { DEFAULT_TIMEOUT } from './connection';\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletExtensionWallet,\r\n  getSolletWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { createTheme, ThemeProvider } from '@material-ui/core';\r\nimport ResponsiveAppBar from './components/ResponsiveAppBar';\r\nimport ProductCategories from './modules/views/ProductCategories';\r\n// import ProductHero from './modules/views/ProductHero';\r\nimport ProductValues from './modules/views/ProductValues';\r\nimport AppFooter from './modules/views/AppFooter';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\r\n  } catch (e) {\r\n    console.log('Failed to construct CandyMachineId', e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nlet error: string | undefined = undefined;\r\n\r\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\r\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\r\n}\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\r\n  'devnet') as WalletAdapterNetwork;\r\nconst rpcHost =\r\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl('devnet');\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <ResponsiveAppBar />\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={DEFAULT_TIMEOUT}\r\n              rpcHost={rpcHost}\r\n              network={network}\r\n              error={error}\r\n            />\r\n            <ProductCategories />\r\n            <ProductValues />\r\n            <AppFooter />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n  hideDuration?: number | null;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const DEFAULT_TIMEOUT = 60000;\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      'Died on ',\r\n      stopPoint,\r\n      'retrying from instruction',\r\n      instructions[stopPoint],\r\n      'instructions length is',\r\n      instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = 'singleGossip',\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\r\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n    partiallySignedTransactions,\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n    'Signed txns length',\r\n    signedTxns.length,\r\n    'vs handed in length',\r\n    instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n          successCallback(txid, i),\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log('Failed at txn index:', i);\r\n        console.log('Caught failure:', e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[] | Transaction,\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (!Array.isArray(instructions)) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n\r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      'recent',\r\n      true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log('Rejected via websocket', result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log('Resolved via websocket', result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport {\r\n  SystemProgram,\r\n  Transaction,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from '@solana/web3.js';\r\nimport { sendTransactions, SequenceType } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  authority: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: null | anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n  retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'processed',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      authority: state.authority,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n      retainAuthority: state.data.retainAuthority,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n  candyMachineAddress: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport interface CollectionData {\r\n  mint: anchor.web3.PublicKey;\r\n  candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n  mint: anchor.web3.PublicKey,\r\n  newAuthority: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('collection_authority'),\r\n        newAuthority.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n  mint: anchor.web3.Keypair;\r\n  userTokenAccount: anchor.web3.PublicKey;\r\n  transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n): Promise<SetupState> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span,\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  return {\r\n    mint: mint,\r\n    userTokenAccount: userTokenAccountAddress,\r\n    transaction: (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions],\r\n        [signers],\r\n        SequenceType.StopOnFailure,\r\n        'singleGossip',\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        [],\r\n        [],\r\n      )\r\n    ).txs[0].txid,\r\n  };\r\n};\r\n\r\ntype MintResult = {\r\n  mintTxId: string;\r\n  metadataKey: anchor.web3.PublicKey;\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n  setupState?: SetupState,\r\n): Promise<MintResult | null> => {\r\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const instructions = [];\r\n  const signers: anchor.web3.Keypair[] = [];\r\n  console.log('SetupState: ', setupState);\r\n  if (!setupState) {\r\n    signers.push(mint);\r\n    instructions.push(\r\n      ...[\r\n        anchor.web3.SystemProgram.createAccount({\r\n          fromPubkey: payer,\r\n          newAccountPubkey: mint.publicKey,\r\n          space: MintLayout.span,\r\n          lamports:\r\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n              MintLayout.span,\r\n            ),\r\n          programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          0,\r\n          payer,\r\n          payer,\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n          userTokenAccountAddress,\r\n          payer,\r\n          payer,\r\n          mint.publicKey,\r\n        ),\r\n        Token.createMintToInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          userTokenAccountAddress,\r\n          payer,\r\n          [],\r\n          1,\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: payer,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: payer,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress,\r\n  );\r\n\r\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    }),\r\n  );\r\n\r\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n  const collectionPDAAccount =\r\n    await candyMachine.program.provider.connection.getAccountInfo(\r\n      collectionPDA,\r\n    );\r\n\r\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n    try {\r\n      const collectionData =\r\n        (await candyMachine.program.account.collectionPda.fetch(\r\n          collectionPDA,\r\n        )) as CollectionData;\r\n      console.log(collectionData);\r\n      const collectionMint = collectionData.mint;\r\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n        collectionMint,\r\n        collectionPDA,\r\n      );\r\n      console.log(collectionMint);\r\n      if (collectionMint) {\r\n        const collectionMetadata = await getMetadata(collectionMint);\r\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n        console.log('Collection PDA: ', collectionPDA.toBase58());\r\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\r\n        instructions.push(\r\n          await candyMachine.program.instruction.setCollectionDuringMint({\r\n            accounts: {\r\n              candyMachine: candyMachineAddress,\r\n              metadata: metadataAddress,\r\n              payer: payer,\r\n              collectionPda: collectionPDA,\r\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n              collectionMint,\r\n              collectionMetadata,\r\n              collectionMasterEdition,\r\n              authority: candyMachine.state.authority,\r\n              collectionAuthorityRecord,\r\n            },\r\n          }),\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const instructionsMatrix = [instructions];\r\n  const signersMatrix = [signers];\r\n\r\n  try {\r\n    const txns = (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        instructionsMatrix,\r\n        signersMatrix,\r\n        SequenceType.StopOnFailure,\r\n        'singleGossip',\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        beforeTransactions,\r\n        afterTransactions,\r\n      )\r\n    ).txs.map(t => t.txid);\r\n    const mintTxn = txns[0];\r\n    return {\r\n      mintTxId: mintTxn,\r\n      metadataKey: metadataAddress,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n"],"sourceRoot":""}